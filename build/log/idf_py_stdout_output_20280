[1/10] Performing build step for 'bootloader'
[1/1] cmd.exe /C "cd /D C:\Users\Public\Projects\esp\esp_SD_card\build\bootloader\esp-idf\esptool_py && C:\Users\Public\ESP32\.espressif\python_env\idf5.2_py3.11_env\Scripts\python.exe C:/Users/Public/esp/v5.2.1/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x0 C:/Users/Public/Projects/esp/esp_SD_card/build/bootloader/bootloader.bin"
Bootloader binary size 0x5250 bytes. 0x2db0 bytes (36%) free.
[2/8] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/sd_logger.c.obj
[3/8] Linking C static library esp-idf\main\libmain.a
[4/8] Generating ld/sections.ld
[5/8] Linking CXX executable esp_SD_card.elf
[6/8] Generating binary image from built executable
esptool.py v4.7.0
Creating esp32s3 image...
Merged 2 ELF sections
Successfully created esp32s3 image.
Generated C:/Users/Public/Projects/esp/esp_SD_card/build/esp_SD_card.bin
[7/8] cmd.exe /C "cd /D C:\Users\Public\Projects\esp\esp_SD_card\build\esp-idf\esptool_py && C:\Users\Public\ESP32\.espressif\python_env\idf5.2_py3.11_env\Scripts\python.exe C:/Users/Public/esp/v5.2.1/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 partition --type app C:/Users/Public/Projects/esp/esp_SD_card/build/partition_table/partition-table.bin C:/Users/Public/Projects/esp/esp_SD_card/build/esp_SD_card.bin"
esp_SD_card.bin binary size 0x51140 bytes. Smallest app partition is 0x100000 bytes. 0xaeec0 bytes (68%) free.
[7/8] cmd.exe /C "cd /D C:\Users\Public\esp\v5.2.1\esp-idf\components\esptool_py && C:\Users\Public\ESP32\.espressif\tools\cmake\3.24.0\bin\cmake.exe -D IDF_PATH=C:/Users/Public/esp/v5.2.1/esp-idf -D SERIAL_TOOL=C:/Users/Public/ESP32/.espressif/python_env/idf5.2_py3.11_env/Scripts/python.exe;;C:/Users/Public/esp/v5.2.1/esp-idf/components/esptool_py/esptool/esptool.py;--chip;esp32s3 -D SERIAL_TOOL_ARGS=--before=default_reset;--after=hard_reset;write_flash;@flash_args -D WORKING_DIRECTORY=C:/Users/Public/Projects/esp/esp_SD_card/build -P C:/Users/Public/esp/v5.2.1/esp-idf/compoesptool.py --chip esp32s3 -p COM8 -b 460800 --before=default_reset --after=hard_reset write_flash --flash_mode dio --flash_freq 80m --flash_size 2MB 0x0 bootloader/bootloader.bin 0x10000 esp_SD_card.bin 0x8000 partition_table/partition-table.bin
esptool.py v4.7.0
Serial port COM8
Connecting....
Chip is ESP32-S3 (QFN56) (revision v0.2)
Features: WiFi, BLE, Embedded PSRAM 2MB (AP_3v3)
Crystal is 40MHz
MAC: 48:27:e2:d3:07:ec
Uploading stub...
Running stub...
Stub running...
Changing baud rate to 460800
Changed.
Configuring flash size...
Flash will be erased from 0x00000000 to 0x00005fff...
Flash will be erased from 0x00010000 to 0x00061fff...
Flash will be erased from 0x00008000 to 0x00008fff...
Compressed 21072 bytes to 13076...
Writing at 0x00000000... (100 %)
Wrote 21072 bytes (13076 compressed) at 0x00000000 in 0.7 seconds (effective 230.3 kbit/s)...
Hash of data verified.
Compressed 332096 bytes to 171990...
Writing at 0x00010000... (9 %)
Writing at 0x0001cbb9... (18 %)
Writing at 0x00027ad4... (27 %)
Writing at 0x0002da45... (36 %)
Writing at 0x00033e6a... (45 %)
Writing at 0x0003a211... (54 %)
Writing at 0x0003fe4d... (63 %)
Writing at 0x00046548... (72 %)
Writing at 0x0004c4ac... (81 %)
Writing at 0x00056323... (90 %)
Writing at 0x0005de58... (100 %)
Wrote 332096 bytes (171990 compressed) at 0x00010000 in 4.1 seconds (effective 655.8 kbit/s)...
Hash of data verified.
Compressed 3072 bytes to 103...
Writing at 0x00008000... (100 %)
Wrote 3072 bytes (103 compressed) at 0x00008000 in 0.1 seconds (effective 348.7 kbit/s)...
Hash of data verified.

Leaving...
Hard resetting via RTS pin...
nents/esptool_py/run_serial_tool.cmake"
